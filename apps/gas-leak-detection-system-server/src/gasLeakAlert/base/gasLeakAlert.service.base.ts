/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GasLeakAlert as PrismaGasLeakAlert,
  Sensor as PrismaSensor,
} from "@prisma/client";

export class GasLeakAlertServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GasLeakAlertCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gasLeakAlert.count(args);
  }

  async gasLeakAlerts(
    args: Prisma.GasLeakAlertFindManyArgs
  ): Promise<PrismaGasLeakAlert[]> {
    return this.prisma.gasLeakAlert.findMany(args);
  }
  async gasLeakAlert(
    args: Prisma.GasLeakAlertFindUniqueArgs
  ): Promise<PrismaGasLeakAlert | null> {
    return this.prisma.gasLeakAlert.findUnique(args);
  }
  async createGasLeakAlert(
    args: Prisma.GasLeakAlertCreateArgs
  ): Promise<PrismaGasLeakAlert> {
    return this.prisma.gasLeakAlert.create(args);
  }
  async updateGasLeakAlert(
    args: Prisma.GasLeakAlertUpdateArgs
  ): Promise<PrismaGasLeakAlert> {
    return this.prisma.gasLeakAlert.update(args);
  }
  async deleteGasLeakAlert(
    args: Prisma.GasLeakAlertDeleteArgs
  ): Promise<PrismaGasLeakAlert> {
    return this.prisma.gasLeakAlert.delete(args);
  }

  async getSensor(parentId: string): Promise<PrismaSensor | null> {
    return this.prisma.gasLeakAlert
      .findUnique({
        where: { id: parentId },
      })
      .sensor();
  }
}
