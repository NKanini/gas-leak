/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GasLeakAlertService } from "../gasLeakAlert.service";
import { GasLeakAlertCreateInput } from "./GasLeakAlertCreateInput";
import { GasLeakAlert } from "./GasLeakAlert";
import { GasLeakAlertFindManyArgs } from "./GasLeakAlertFindManyArgs";
import { GasLeakAlertWhereUniqueInput } from "./GasLeakAlertWhereUniqueInput";
import { GasLeakAlertUpdateInput } from "./GasLeakAlertUpdateInput";

export class GasLeakAlertControllerBase {
  constructor(protected readonly service: GasLeakAlertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GasLeakAlert })
  async createGasLeakAlert(
    @common.Body() data: GasLeakAlertCreateInput
  ): Promise<GasLeakAlert> {
    return await this.service.createGasLeakAlert({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        alertLevel: true,
        alertTime: true,
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GasLeakAlert] })
  @ApiNestedQuery(GasLeakAlertFindManyArgs)
  async gasLeakAlerts(@common.Req() request: Request): Promise<GasLeakAlert[]> {
    const args = plainToClass(GasLeakAlertFindManyArgs, request.query);
    return this.service.gasLeakAlerts({
      ...args,
      select: {
        alertLevel: true,
        alertTime: true,
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GasLeakAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gasLeakAlert(
    @common.Param() params: GasLeakAlertWhereUniqueInput
  ): Promise<GasLeakAlert | null> {
    const result = await this.service.gasLeakAlert({
      where: params,
      select: {
        alertLevel: true,
        alertTime: true,
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GasLeakAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGasLeakAlert(
    @common.Param() params: GasLeakAlertWhereUniqueInput,
    @common.Body() data: GasLeakAlertUpdateInput
  ): Promise<GasLeakAlert | null> {
    try {
      return await this.service.updateGasLeakAlert({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          alertLevel: true,
          alertTime: true,
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GasLeakAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGasLeakAlert(
    @common.Param() params: GasLeakAlertWhereUniqueInput
  ): Promise<GasLeakAlert | null> {
    try {
      return await this.service.deleteGasLeakAlert({
        where: params,
        select: {
          alertLevel: true,
          alertTime: true,
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
