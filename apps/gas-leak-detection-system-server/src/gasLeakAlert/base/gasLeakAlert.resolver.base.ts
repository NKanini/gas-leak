/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GasLeakAlert } from "./GasLeakAlert";
import { GasLeakAlertCountArgs } from "./GasLeakAlertCountArgs";
import { GasLeakAlertFindManyArgs } from "./GasLeakAlertFindManyArgs";
import { GasLeakAlertFindUniqueArgs } from "./GasLeakAlertFindUniqueArgs";
import { CreateGasLeakAlertArgs } from "./CreateGasLeakAlertArgs";
import { UpdateGasLeakAlertArgs } from "./UpdateGasLeakAlertArgs";
import { DeleteGasLeakAlertArgs } from "./DeleteGasLeakAlertArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { GasLeakAlertService } from "../gasLeakAlert.service";
@graphql.Resolver(() => GasLeakAlert)
export class GasLeakAlertResolverBase {
  constructor(protected readonly service: GasLeakAlertService) {}

  async _gasLeakAlertsMeta(
    @graphql.Args() args: GasLeakAlertCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GasLeakAlert])
  async gasLeakAlerts(
    @graphql.Args() args: GasLeakAlertFindManyArgs
  ): Promise<GasLeakAlert[]> {
    return this.service.gasLeakAlerts(args);
  }

  @graphql.Query(() => GasLeakAlert, { nullable: true })
  async gasLeakAlert(
    @graphql.Args() args: GasLeakAlertFindUniqueArgs
  ): Promise<GasLeakAlert | null> {
    const result = await this.service.gasLeakAlert(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GasLeakAlert)
  async createGasLeakAlert(
    @graphql.Args() args: CreateGasLeakAlertArgs
  ): Promise<GasLeakAlert> {
    return await this.service.createGasLeakAlert({
      ...args,
      data: {
        ...args.data,

        sensor: args.data.sensor
          ? {
              connect: args.data.sensor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GasLeakAlert)
  async updateGasLeakAlert(
    @graphql.Args() args: UpdateGasLeakAlertArgs
  ): Promise<GasLeakAlert | null> {
    try {
      return await this.service.updateGasLeakAlert({
        ...args,
        data: {
          ...args.data,

          sensor: args.data.sensor
            ? {
                connect: args.data.sensor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GasLeakAlert)
  async deleteGasLeakAlert(
    @graphql.Args() args: DeleteGasLeakAlertArgs
  ): Promise<GasLeakAlert | null> {
    try {
      return await this.service.deleteGasLeakAlert(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sensor, {
    nullable: true,
    name: "sensor",
  })
  async getSensor(
    @graphql.Parent() parent: GasLeakAlert
  ): Promise<Sensor | null> {
    const result = await this.service.getSensor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
