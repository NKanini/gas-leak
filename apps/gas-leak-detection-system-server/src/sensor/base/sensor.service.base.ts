/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Sensor as PrismaSensor,
  GasLeakAlert as PrismaGasLeakAlert,
  MaintenanceLog as PrismaMaintenanceLog,
  Location as PrismaLocation,
} from "@prisma/client";

export class SensorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SensorCountArgs, "select">): Promise<number> {
    return this.prisma.sensor.count(args);
  }

  async sensors(args: Prisma.SensorFindManyArgs): Promise<PrismaSensor[]> {
    return this.prisma.sensor.findMany(args);
  }
  async sensor(
    args: Prisma.SensorFindUniqueArgs
  ): Promise<PrismaSensor | null> {
    return this.prisma.sensor.findUnique(args);
  }
  async createSensor(args: Prisma.SensorCreateArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.create(args);
  }
  async updateSensor(args: Prisma.SensorUpdateArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.update(args);
  }
  async deleteSensor(args: Prisma.SensorDeleteArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.delete(args);
  }

  async findGasLeakAlerts(
    parentId: string,
    args: Prisma.GasLeakAlertFindManyArgs
  ): Promise<PrismaGasLeakAlert[]> {
    return this.prisma.sensor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gasLeakAlerts(args);
  }

  async findMaintenanceLogs(
    parentId: string,
    args: Prisma.MaintenanceLogFindManyArgs
  ): Promise<PrismaMaintenanceLog[]> {
    return this.prisma.sensor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceLogs(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.sensor
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
